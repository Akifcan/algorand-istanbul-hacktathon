#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "data"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/algoflow_vault/contract.algo.ts:5
    // public data = GlobalState<string>({ initialValue: '' })
    bytec_0 // "data"
    pushbytes ""
    app_global_put

main_after_if_else@2:
    // smart_contracts/algoflow_vault/contract.algo.ts:3
    // export class AlgoflowVault extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x1019c668 0x58524cb5 // method "writeData(string)void", method "getData()string"
    txna ApplicationArgs 0
    match main_writeData_route@5 main_getData_route@6

main_after_if_else@13:
    // smart_contracts/algoflow_vault/contract.algo.ts:3
    // export class AlgoflowVault extends Contract {
    intc_1 // 0
    return

main_getData_route@6:
    // smart_contracts/algoflow_vault/contract.algo.ts:12
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getData
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_writeData_route@5:
    // smart_contracts/algoflow_vault/contract.algo.ts:7
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/algoflow_vault/contract.algo.ts:3
    // export class AlgoflowVault extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/algoflow_vault/contract.algo.ts:7
    // @abimethod()
    callsub writeData
    intc_0 // 1
    return

main_bare_routing@9:
    // smart_contracts/algoflow_vault/contract.algo.ts:3
    // export class AlgoflowVault extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/algoflow_vault/contract.algo.ts::AlgoflowVault.writeData(inputData: bytes) -> void:
writeData:
    // smart_contracts/algoflow_vault/contract.algo.ts:7-8
    // @abimethod()
    // public writeData(inputData: string): void {
    proto 1 0
    // smart_contracts/algoflow_vault/contract.algo.ts:5
    // public data = GlobalState<string>({ initialValue: '' })
    bytec_0 // "data"
    // smart_contracts/algoflow_vault/contract.algo.ts:9
    // this.data.value = inputData
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/algoflow_vault/contract.algo.ts::AlgoflowVault.getData() -> bytes:
getData:
    // smart_contracts/algoflow_vault/contract.algo.ts:5
    // public data = GlobalState<string>({ initialValue: '' })
    intc_1 // 0
    bytec_0 // "data"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/algoflow_vault/contract.algo.ts:14
    // return this.data.value
    retsub
