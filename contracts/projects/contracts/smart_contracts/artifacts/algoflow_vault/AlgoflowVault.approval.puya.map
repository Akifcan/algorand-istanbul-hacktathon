{
  "version": 3,
  "sources": [
    "/Users/akif/Desktop/algo-pos-app/contracts/projects/contracts/smart_contracts/algoflow_vault/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAIS;AAA2C;;AAAlD;AAFF;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AASG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAJH;;;AAAA;;;AAIG;;;AAAA;;AAJH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAIE;;;AAFO;AAIL;;AAAA;;AAJK;AAAA;AAAA;AAAA;AASL",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"data\""
    },
    "12": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "14": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "17": {
      "op": "bytec_0 // \"data\"",
      "defined_out": [
        "\"data\""
      ],
      "stack_out": [
        "\"data\""
      ]
    },
    "18": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"data\""
      ],
      "stack_out": [
        "\"data\"",
        "\"\""
      ]
    },
    "20": {
      "op": "app_global_put",
      "stack_out": []
    },
    "21": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "23": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "26": {
      "op": "pushbytess 0x1019c668 0x58524cb5 // method \"writeData(string)void\", method \"getData()string\"",
      "defined_out": [
        "Method(getData()string)",
        "Method(writeData(string)void)"
      ],
      "stack_out": [
        "Method(writeData(string)void)",
        "Method(getData()string)"
      ]
    },
    "38": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getData()string)",
        "Method(writeData(string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(writeData(string)void)",
        "Method(getData()string)",
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "match main_writeData_route@5 main_getData_route@6",
      "stack_out": []
    },
    "47": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "op": "return",
      "stack_out": []
    },
    "49": {
      "block": "main_getData_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "51": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "52": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "53": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "55": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "56": {
      "callsub": "smart_contracts/algoflow_vault/contract.algo.ts::AlgoflowVault.getData",
      "op": "callsub getData",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "59": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "60": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "61": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "62": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "65": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "66": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "67": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "75": {
      "op": "log",
      "stack_out": []
    },
    "76": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "return",
      "stack_out": []
    },
    "78": {
      "block": "main_writeData_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "81": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "84": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "85": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "88": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "91": {
      "callsub": "smart_contracts/algoflow_vault/contract.algo.ts::AlgoflowVault.writeData",
      "op": "callsub writeData",
      "stack_out": []
    },
    "94": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "return",
      "stack_out": []
    },
    "96": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "98": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "103": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "104": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "105": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "return",
      "stack_out": []
    },
    "107": {
      "subroutine": "smart_contracts/algoflow_vault/contract.algo.ts::AlgoflowVault.writeData",
      "params": {
        "inputData#0": "bytes"
      },
      "block": "writeData",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "110": {
      "op": "bytec_0 // \"data\"",
      "defined_out": [
        "\"data\""
      ],
      "stack_out": [
        "\"data\""
      ]
    },
    "111": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"data\"",
        "inputData#0 (copy)"
      ],
      "stack_out": [
        "\"data\"",
        "inputData#0 (copy)"
      ]
    },
    "113": {
      "op": "app_global_put",
      "stack_out": []
    },
    "114": {
      "retsub": true,
      "op": "retsub"
    },
    "115": {
      "subroutine": "smart_contracts/algoflow_vault/contract.algo.ts::AlgoflowVault.getData",
      "params": {},
      "block": "getData",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "116": {
      "op": "bytec_0 // \"data\"",
      "defined_out": [
        "\"data\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"data\""
      ]
    },
    "117": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "118": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "119": {
      "retsub": true,
      "op": "retsub"
    }
  }
}